# This GitHub Actions job script has been generated by a script via
#
#   haskell-ci 'github-actions' 'cabal.project'
#
# To regenerate the script (for example after adjusting tested-with) run
#
#   haskell-ci regenerate
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.11.20201211
#
name: haskell-ci
on:
  - push
jobs:
  haskell-ci:
    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        ghc:
          - 8.10.2
        cabal:
          - "3.4"
        os:
          - ubuntu-16.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-haskell@v1
        id: setup-haskell-cabal
        name: Setup
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}
      - name: Before cache
        run: |
          rm -fv $CABALHOME/packages/hackage.haskell.org/build-reports.log
          rm -fv $CABALHOME/packages/hackage.haskell.org/00-index.*
          rm -fv $CABALHOME/packages/hackage.haskell.org/*.json
          rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.cache
          rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar
          rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar.idx
          rm -rfv $CABALHOME/packages/head.hackage
      - uses: actions/cache@v2
        name: Cache
        with:
          path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          key: ${{ runner.os }}-${{ matrix.ghc }}
      - name: Before install
        run: |
          HC=ghc
          echo "HC=ghc" >> $GITHUB_ENV
          WITHCOMPILER="-w $HC"
          echo "WITHCOMPILER=\"-w $HC\"" >> $GITHUB_ENV
          HADDOCK=haddock
          echo "HADDOCK=haddock" >> $GITHUB_ENV
          HCPKG="$HC-pkg"
          echo "HCPKG=\"$HC-pkg\"" >> $GITHUB_ENV
          unset CC
          CABAL=cabal
          echo "CABAL=cabal" >> $GITHUB_ENV
          CABALHOME=$HOME/.cabal
          echo "CABALHOME=$HOME/.cabal" >> $GITHUB_ENV
          export PATH="$CABALHOME/bin:$PATH"
          echo "export PATH=\"$CABALHOME/bin:$PATH\"" >> $GITHUB_ENV
          TOP=$(pwd)
          echo "TOP=$(pwd)" >> $GITHUB_ENV
          HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')" >> $GITHUB_ENV
          echo $HCNUMVER
          CABAL="$CABAL -vnormal+nowrap"
          echo "CABAL=\"$CABAL -vnormal+nowrap\"" >> $GITHUB_ENV
          set -o pipefail
          TEST=--enable-tests
          echo "TEST=--enable-tests" >> $GITHUB_ENV
          BENCH=--enable-benchmarks
          echo "BENCH=--enable-benchmarks" >> $GITHUB_ENV
          HEADHACKAGE=false
          echo "HEADHACKAGE=false" >> $GITHUB_ENV
          rm -f $CABALHOME/config
          echo "verbose: normal +nowrap +markoutput"          >> $CABALHOME/config
          echo "remote-build-reporting: anonymous"            >> $CABALHOME/config
          echo "write-ghc-environment-files: always"          >> $CABALHOME/config
          echo "remote-repo-cache: $CABALHOME/packages"       >> $CABALHOME/config
          echo "logs-dir:          $CABALHOME/logs"           >> $CABALHOME/config
          echo "world-file:        $CABALHOME/world"          >> $CABALHOME/config
          echo "extra-prog-path:   $CABALHOME/bin"            >> $CABALHOME/config
          echo "symlink-bindir:    $CABALHOME/bin"            >> $CABALHOME/config
          echo "installdir:        $CABALHOME/bin"            >> $CABALHOME/config
          echo "build-summary:     $CABALHOME/logs/build.log" >> $CABALHOME/config
          echo "store-dir:         $CABALHOME/store"          >> $CABALHOME/config
          echo "install-dirs user"                            >> $CABALHOME/config
          echo "  prefix: $CABALHOME"                         >> $CABALHOME/config
          echo "repository hackage.haskell.org"               >> $CABALHOME/config
          echo "  url: http://hackage.haskell.org/"           >> $CABALHOME/config
      - name: Install
        run: |
          ${CABAL} --version
          echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
          echo "program-default-options"                >> $CABALHOME/config
          echo "  ghc-options: $GHCJOBS +RTS -M6G -RTS" >> $CABALHOME/config
          
          cat $CABALHOME/config
          rm -fv cabal.project cabal.project.local cabal.project.freeze
          ${CABAL} v2-update -v
          rm -rf cabal.project cabal.project.local cabal.project.freeze
          touch cabal.project
          echo "packages: ." >> cabal.project
          
          echo 'package gha-sandbox' >> cabal.project
          echo '  ghc-options: -Werror=missing-methods' >> cabal.project
          
          for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(gha-sandbox)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done
          cat cabal.project || true
          cat cabal.project.local || true
          if [ -f "./configure.ac" ]; then (cd "." && autoreconf -i); fi
          ${CABAL} v2-freeze $WITHCOMPILER ${TEST} ${BENCH}
          cat cabal.project.freeze | sed -E 's/^(constraints: *| *)//' | sed 's/any.//'
          rm  cabal.project.freeze
          ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} --dep -j2 all
          ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --dep -j2 all
      - name: Script
        run: |
          DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)
          echo "DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)" >> $GITHUB_ENV
          ${CABAL} v2-sdist all
          mv dist-newstyle/sdist/*.tar.gz ${DISTDIR}/
          cd ${DISTDIR} || false
          find . -maxdepth 1 -type f -name '*.tar.gz' -exec tar -xvf '{}' \;
          find . -maxdepth 1 -type f -name '*.tar.gz' -exec rm       '{}' \;
          PKGDIR_gha_sandbox="$(find . -maxdepth 1 -type d -regex '.*/gha-sandbox-[0-9.]*')"
          rm -rf cabal.project cabal.project.local cabal.project.freeze
          touch cabal.project
          echo "packages: ${PKGDIR_gha_sandbox}" >> cabal.project
          
          echo 'package gha-sandbox' >> cabal.project
          echo '  ghc-options: -Werror=missing-methods' >> cabal.project
          
          for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(gha-sandbox)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done
          cat cabal.project || true
          cat cabal.project.local || true
          ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all
          ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} all
          ${CABAL} v2-test $WITHCOMPILER ${TEST} ${BENCH} all --test-show-details=direct
          (cd ${PKGDIR_gha_sandbox} && ${CABAL} -vnormal check)
          ${CABAL} v2-haddock $WITHCOMPILER --with-haddock $HADDOCK ${TEST} ${BENCH} all
          rm -f cabal.project.local
          ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all

# REGENDATA ("0.11.20201211",["github-actions","cabal.project"])
# EOF
